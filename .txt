from tkinter import *
from tkinter import ttk, messagebox, simpledialog
import mysql.connector
import textwrap

def conectar_bd():
    try:
        conexion = mysql.connector.connect(
            host="localhost",
            user="root",
            password="Ccrj1108231407&",
            database="sistema_login"
        )
        return conexion
    except mysql.connector.Error:
        return None

def actualizar_cultivo(id_usuario, columna, nuevo_valor, nombre_cult):
    conexion = conectar_bd()
    if conexion:
        cursor = conexion.cursor()
        try:
            consulta = f"UPDATE cult_personalizado SET {columna} = %s WHERE id_usuario = %s AND nombre_cult = %s"
            cursor.execute(consulta, (nuevo_valor, id_usuario, nombre_cult))
            conexion.commit()
            messagebox.showinfo("Éxito", f"{columna} actualizado correctamente.")
        except mysql.connector.Error as e:
            messagebox.showerror("Error", f"No se pudo actualizar el cultivo: {e}")
        finally:
            conexion.close()
        agregar_cultivos(frame_global, id_usuario)

def editar_cultivo(id_usuario, columna, nombre_cult, valor_actual):
    nuevo_valor = simpledialog.askstring("Editar", f"Nuevo valor para {columna}:", initialvalue=valor_actual)
    if nuevo_valor is not None:
        actualizar_cultivo(id_usuario, columna, nuevo_valor, nombre_cult)

def editar_todo(id_usuario, nombre_cult, valores_actuales):
    campos = ["nombre_cult", "tipo_cult", "precio_estimado", "ubicacion", "descripcion"]
    nuevos_valores = []

    for i, campo in enumerate(campos):
        nuevo_valor = simpledialog.askstring("Editar Todo", f"Nuevo valor para {campo}:", initialvalue=valores_actuales[i])
        if nuevo_valor is None:
            return
        nuevos_valores.append(nuevo_valor)

    conexion = conectar_bd()
    if conexion:
        cursor = conexion.cursor()
        try:
            cursor.execute("""
                UPDATE cult_personalizado
                SET nombre_cult=%s, tipo_cult=%s, precio_estimado=%s, ubicacion=%s, descripcion=%s
                WHERE id_usuario=%s AND nombre_cult=%s
            """, (*nuevos_valores, id_usuario, nombre_cult))
            conexion.commit()
            messagebox.showinfo("Éxito", "Cultivo actualizado correctamente.")
        except mysql.connector.Error as e:
            messagebox.showerror("Error", f"No se pudo actualizar el cultivo: {e}")
        finally:
            conexion.close()
        agregar_cultivos(frame_global, id_usuario)

def eliminar_cultivo(id_usuario, nombre_cult):
    confirmar = messagebox.askyesno("Eliminar Cultivo", f"¿Está seguro de eliminar el cultivo '{nombre_cult}'?")
    if confirmar:
        conexion = conectar_bd()
        if conexion:
            cursor = conexion.cursor()
            try:
                cursor.execute("DELETE FROM cult_personalizado WHERE id_usuario = %s AND nombre_cult = %s", (id_usuario, nombre_cult))
                conexion.commit()
                messagebox.showinfo("Éxito", "Cultivo eliminado correctamente.")
            except mysql.connector.Error as e:
                messagebox.showerror("Error", f"No se pudo eliminar el cultivo: {e}")
            finally:
                conexion.close()
            agregar_cultivos(frame_global, id_usuario)

def mostrar_menu(event, id_usuario):
    item = tabla.identify_row(event.y)
    column_id = tabla.identify_column(event.x)

    if item:
        valores = tabla.item(item, "values")
        nombre_cult = valores[0]  # Identificador del cultivo
        columnas = ["nombre_cult", "tipo_cult", "precio_estimado", "ubicacion", "descripcion"]

        menu_contextual = Menu(tabla, tearoff=0)
        menu_contextual.add_command(label="Editar Nombre", command=lambda: editar_cultivo(id_usuario, columnas[0], nombre_cult, valores[0]))
        menu_contextual.add_command(label="Editar Tipo", command=lambda: editar_cultivo(id_usuario, columnas[1], nombre_cult, valores[1]))
        menu_contextual.add_command(label="Editar Precio", command=lambda: editar_cultivo(id_usuario, columnas[2], nombre_cult, valores[2]))
        menu_contextual.add_command(label="Editar Ubicación", command=lambda: editar_cultivo(id_usuario, columnas[3], nombre_cult, valores[3]))
        menu_contextual.add_command(label="Editar Descripción", command=lambda: editar_cultivo(id_usuario, columnas[4], nombre_cult, valores[4]))
        menu_contextual.add_separator()
        menu_contextual.add_command(label="Editar Todo", command=lambda: editar_todo(id_usuario, nombre_cult, valores))
        menu_contextual.add_separator()
        menu_contextual.add_command(label="Eliminar Cultivo", command=lambda: eliminar_cultivo(id_usuario, nombre_cult))

        menu_contextual.post(event.x_root, event.y_root)

def agregar_cultivos(frame, id_usuario):
    global frame_global, tabla
    frame_global = frame
    
    for widget in frame.winfo_children():
        widget.destroy()
    
    frame.config(bg="#1E1E1E")
    Label(frame, text="🌱 Cultivos Disponibles 🌱", bg="#1E1E1E", fg="white", font=("Arial", 22, "bold")).pack(pady=15)
    Label(frame, text="Consulta los cultivos disponibles en Puebla.", bg="#1E1E1E", fg="#A0A0A0", font=("Arial", 14)).pack(pady=5)
    
    tabla_frame = Frame(frame, bg="#1E1E1E")
    tabla_frame.pack(pady=10, padx=20, fill=BOTH, expand=True)
    
    columnas = ("Nombre", "Tipo", "Precio (MXN/kg)", "Ubicación", "Descripción")
    tabla = ttk.Treeview(tabla_frame, columns=columnas, show="headings")
    
    for col in columnas:
        tabla.heading(col, text=col)
    
    tabla.column("Nombre", width=150)
    tabla.column("Tipo", width=120)
    tabla.column("Precio (MXN/kg)", width=130)
    tabla.column("Ubicación", width=180)
    tabla.column("Descripción", width=300)
    
    tabla.pack(fill=BOTH, expand=True)

    try:
        conexion = conectar_bd()
        cursor = conexion.cursor()
        cursor.execute("SELECT nombre_cult, tipo_cult, precio_estimado, ubicacion, descripcion FROM cult_personalizado WHERE id_usuario = %s", (id_usuario,))
        for row in cursor.fetchall():
            nombre, tipo, precio, ubicacion, descripcion = row
            descripcion_formateada = "\n".join(textwrap.wrap(descripcion, width=40))
            tabla.insert("", "end", values=(nombre, tipo, precio, ubicacion, descripcion_formateada))
        conexion.close()
    except mysql.connector.Error as e:
        messagebox.showerror("Error", f"No se pudieron cargar los cultivos: {e}")

    tabla.bind("<Button-3>", lambda event: mostrar_menu(event, id_usuario))  # Click derecho

    boton_agregar = Button(frame, text="Agregar Cultivo", bg="#008CBA", fg="white", font=("Arial", 14, "bold"), command=lambda: agregar_cultivos(id_usuario))
    boton_agregar.pack(pady=10)